var __whitespace={" ":!0,"\t":!0,"\n":!0,"\f":!0,"\r":!0},difflib={defaultJunkFunction:function(t){return __whitespace.hasOwnProperty(t)},stripLinebreaks:function(t){return t.replace(/^[\n\r]*|[\n\r]*$/g,"")},stringAsLines:function(t){for(var i=t.indexOf("\n"),n=t.indexOf("\r"),n=-1<i&&-1<n||n<0?"\n":"\r",e=t.split(n),s=0;s<e.length;s++)e[s]=difflib.stripLinebreaks(e[s]);return e},__reduce:function(t,i,n){if(null!=n)var e=n,s=0;else{if(!i)return null;e=i[0],s=1}for(;s<i.length;s++)e=t(e,i[s]);return e},__ntuplecomp:function(t,i){for(var n=Math.max(t.length,i.length),e=0;e<n;e++){if(t[e]<i[e])return-1;if(t[e]>i[e])return 1}return t.length==i.length?0:t.length<i.length?-1:1},__calculate_ratio:function(t,i){return i?2*t/i:1},__isindict:function(i){return function(t){return i.hasOwnProperty(t)}},__dictget:function(t,i,n){return t.hasOwnProperty(i)?t[i]:n},SequenceMatcher:function(t,i,n){this.set_seqs=function(t,i){this.set_seq1(t),this.set_seq2(i)},this.set_seq1=function(t){t!=this.a&&(this.a=t,this.matching_blocks=this.opcodes=null)},this.set_seq2=function(t){t!=this.b&&(this.b=t,this.matching_blocks=this.opcodes=this.fullbcount=null,this.__chain_b())},this.__chain_b=function(){for(var t=this.b,i=t.length,n=this.b2j={},e={},s=0;s<t.length;s++){var h,r=t[s];n.hasOwnProperty(r)?(h=n[r],200<=i&&100*h.length>i?(e[r]=1,delete n[r]):h.push(s)):n[r]=[s]}for(r in e)e.hasOwnProperty(r)&&delete n[r];var u=this.isjunk,a={};if(u){for(var r in e)e.hasOwnProperty(r)&&u(r)&&(a[r]=1,delete e[r]);for(var r in n)n.hasOwnProperty(r)&&u(r)&&(a[r]=1,delete n[r])}this.isbjunk=difflib.__isindict(a),this.isbpopular=difflib.__isindict(e)},this.find_longest_match=function(t,i,n,e){for(var s,h,r=this.a,u=this.b,a=this.b2j,l=this.isbjunk,o=t,f=n,c=0,_={},b=[],g=t;g<i;g++){var p,d={},m=difflib.__dictget(a,r[g],b);for(p in m)if(m.hasOwnProperty(p)&&!((s=m[p])<n)){if(e<=s)break;d[s]=h=difflib.__dictget(_,s-1,0)+1,c<h&&(o=g-h+1,f=s-h+1,c=h)}_=d}for(;t<o&&n<f&&!l(u[f-1])&&r[o-1]==u[f-1];)o--,f--,c++;for(;o+c<i&&f+c<e&&!l(u[f+c])&&r[o+c]==u[f+c];)c++;for(;t<o&&n<f&&l(u[f-1])&&r[o-1]==u[f-1];)o--,f--,c++;for(;o+c<i&&f+c<e&&l(u[f+c])&&r[o+c]==u[f+c];)c++;return[o,f,c]},this.get_matching_blocks=function(){if(null!=this.matching_blocks)return this.matching_blocks;for(var t,i,n,e,s,h,r,u,a=this.a.length,l=this.b.length,o=[[0,a,0,l]],f=[];o.length;)t=(r=o.pop())[0],i=r[1],n=r[2],e=r[3],s=(u=this.find_longest_match(t,i,n,e))[0],h=u[1],(r=u[2])&&(f.push(u),t<s&&n<h&&o.push([t,s,n,h]),s+r<i&&h+r<e&&o.push([s+r,i,h+r,e]));f.sort(difflib.__ntuplecomp);var c,_,b,g,p,d=0,m=0,v=0,k=[];for(p in f)f.hasOwnProperty(p)&&(_=(c=f[p])[0],b=c[1],g=c[2],d+v==_&&m+v==b?v+=g:(v&&k.push([d,m,v]),d=_,m=b,v=g));return v&&k.push([d,m,v]),k.push([a,l,0]),this.matching_blocks=k,this.matching_blocks},this.get_opcodes=function(){if(null!=this.opcodes)return this.opcodes;var t,i,n,e,s=0,h=0,r=[];this.opcodes=r;var u,a=this.get_matching_blocks();for(u in a)a.hasOwnProperty(u)&&(t=(e=a[u])[0],i=e[1],n=e[2],e="",s<t&&h<i?e="replace":s<t?e="delete":h<i&&(e="insert"),e&&r.push([e,s,t,h,i]),s=t+n,h=i+n,n&&r.push(["equal",t,s,i,h]));return r},this.get_grouped_opcodes=function(t){t=t||3;var i,n,e,s,h,r,u=this.get_opcodes();"equal"==(u=u||[["equal",0,1,0,1]])[0][0]&&(n=(i=u[0])[0],e=i[1],s=i[2],h=i[3],r=i[4],u[0]=[n,Math.max(e,s-t),s,Math.max(h,r-t),r]),"equal"==u[u.length-1][0]&&(n=(i=u[u.length-1])[0],e=i[1],s=i[2],h=i[3],r=i[4],u[u.length-1]=[n,e,Math.min(s,e+t),h,Math.min(r,h+t)]);var a,l=t+t,o=[],f=[];for(a in u)u.hasOwnProperty(a)&&(n=(i=u[a])[0],e=i[1],s=i[2],h=i[3],r=i[4],"equal"==n&&l<s-e&&(o.push([n,e,Math.min(s,e+t),h,Math.min(r,h+t)]),f.push(o),o=[],e=Math.max(e,s-t),h=Math.max(h,r-t)),o.push([n,e,s,h,r]));return!o||1==o.length&&"equal"==o[0][0]||f.push(o),f},this.ratio=function(){return matches=difflib.__reduce(function(t,i){return t+i[i.length-1]},this.get_matching_blocks(),0),difflib.__calculate_ratio(matches,this.a.length+this.b.length)},this.quick_ratio=function(){var t,i;if(null==this.fullbcount){this.fullbcount=t={};for(var n=0;n<this.b.length;n++)t[i=this.b[n]]=difflib.__dictget(t,i,0)+1}t=this.fullbcount;for(var e={},s=difflib.__isindict(e),h=numb=0,n=0;n<this.a.length;n++)i=this.a[n],numb=s(i)?e[i]:difflib.__dictget(t,i,0),e[i]=numb-1,0<numb&&h++;return difflib.__calculate_ratio(h,this.a.length+this.b.length)},this.real_quick_ratio=function(){var t=this.a.length,i=this.b.length;return _calculate_ratio(Math.min(t,i),t+i)},this.isjunk=n||difflib.defaultJunkFunction,this.a=this.b=null,this.set_seqs(t,i)}};
